# -*- coding: utf-8 -*-
"""df_videogames_Luiz Gabriel_D3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Xig-kr4m46ovQHlqB3xXm-tnj6iCcehT

#A1 - 05/06/2024
Aluno: Luiz Gabriel Lisboa Santos - 34566724

# Importando a biblioteca
"""

import pandas as pd # importando a biblioteca para poder utilizar seus métodos

"""# Criando as listas"""

# Inserindo os dados de cada elemento em forma de listas, onde cada lista se transformará em uma coluna futuramente.
nomes_jogos = ["Zelda Ocarina of Time", "Dark Souls 3", "The Witcher 3", "Hollow Knight", "Pokémon X", "Elden Ring", "Super Mario Odyssey", "Metal Gear 3", "Persona 5"]
dev_jogos = ["Nintendo", "From Software", "CD Projekt Red", "Team Cherry", "Nintendo", "From Software", "Nintendo", "Konami", "Atlus"]
genero_jogos = ["Aventura", "RPG", "RPG", "Plataforma", "RPG", "RPG", "Plataforma", "FPS", "RPG"]
plataforma_jogos = ["N64", "PS4", "PS4", "PC", "3ds", "PC", "Switch", "PS2", "PS3"]
duracao_jogos = [30, 48, 103, 41, 70, 100, 27, 20, 113] # Fonte: https://howlongtobeat.com/
ano_jogos = [1998, 2016, 2015, 2017, 2013, 2022, 2017, 2004, 2016]

"""# Criando o dicionário e o DataFrame"""

# Juntando todas as listas acima em um único dicionário, para organizar e em seguida transformar em DataFrame.
dicionario_jogos = {
    "Nome": nomes_jogos,
    "Desenvolvedora": dev_jogos,
    "Gênero": genero_jogos,
    "Plataforma": plataforma_jogos,
    "Duração (h)": duracao_jogos,
    "Ano": ano_jogos
    }

# Criando o DataFrame, passando como parâmetro o dicionário acima
df_videogames = pd.DataFrame(dicionario_jogos)

"""# Questão 1: Apresente em tela (output) toda a base de dados."""

display(df_videogames) # mostra toda a base de dados, ordenada pelo número do índice
# Obs.: a função display somente funciona nativamente na na IDE Google Colab, em outras IDEs seria necessário importar a biblioteca IPython.
# Decidi utilizar este método mesmo assim por ser mais bonito visualmente e por apresentar a possibilidade de filtragem e geração de gráficos.

"""# Questão 2: Apresente o tamanho do seu dataframe (quantas colunas x linhas)."""

print(f"Colunas: {df_videogames.shape[1]}") # imprimindo a quantidade total de colunas
print(f"Linhas: {df_videogames.shape[0]}") # imprimindo a quantidade total de linhas
print(f"Tamanho total do quadro de dados: {df_videogames.size}") # imprimindo a quantidade total de elementos (dados) armazenados
print(f"Dimensões do quadro de dados: {df_videogames.ndim} (bidimensional)") # imprimindo o número de dimensões do quadro de dados

"""# Questão 3: Acesse a linha (x) e apresente em tela todas as características do item."""

display(df_videogames.loc[[5]]) # imprime todos os dados de um determinado índice, separados pelas respectivas colunas.

# Obs.: [] é indexador de listas, já [[]] é o indexador de matrizes
# ou seja, o primeiro printa o objeto inteiro e o segundo printa as colunas e linhas de forma mais organizada/visual

"""# Questão 4: Verifique se o dataframe está vazio."""

def esta_vazio(df): # função que verifica se o dataframe está vazio e retorna uma string com o resultado.
    if df.empty:
        return "Sim."
    else:
        return f"Não, e conta com {df.shape[0]} linhas no total." # len(df) também funciona

print(f"O DataFrame está vazio?\n{esta_vazio(df_videogames)}")

"""# Questão 5: Apresente em tela os 5 primeiros registros da base de dados."""

display(df_videogames.head(5)) # head() imprime as linhas do 0 até à especificada no parâmetro.

"""# Questão 6: Exclua um item (linha) de sua base de dados."""

display(df_videogames.drop([1])) # por padrão, o método drop() apenas retorna a lista modificada, porém com o parâmetro inplace = True, ele passa a alterar o DataFrame original.
# note que no output a lista de index 1 não foi apresentada, porque o método drop() a removeu desta cópia da lista.

"""# Questão 7: Adicione um item (linha) na sua base de dados."""

# adicionando um novo elemento no início da tabela
df_videogames.loc[-1] = ["Sekiro", "From Software", "Ação", "PS4", 30, 2019] # adiciona a nova linha com informações no final do DataFrame
df_videogames.index = df_videogames.index + 1 # adiciona um índice a mais
df_videogames = df_videogames.sort_index() # reorganiza o DataFrame por índice, fazendo com que a nova linha fique no índice 0 (por isso o novo item adicionado vai pro início)
display(df_videogames)

"""# Questão 8: Transponha a coluna para a linha em sua base de dados."""

display(df_videogames.T) # o método T realiza a transposição do quadro de dados (trocar as colunas com as linhas), sendo assim, agora possuímos 10 colunas e 6 linhas.
print(f"Nova quantidade de colunas: {(df_videogames.T).shape[1]}") # imprimindo as novas quantidade de colunas e linhas
print(f"Nova quantidade de linhas: {(df_videogames.T).shape[0]}")

"""# Questão 9: Apresente em tela somente a 1ª e a 2ª coluna (rótulo) da base de dados."""

display(df_videogames.iloc[:, [0, 1]]) # ou display(df_videogames.loc[:, ["Nome", "Desenvolvedora"]]), caso já saiba o rótulo das colunas
# iloc == localizar colunas em uma posição (inteiro) específica, útil quando não se sabe o nome das colunas mas sim o índice
# : == para selecionar todas as linhas da posicao 0 até o final
# [0, 1] == índices das colunas que quero trazer

"""# Questão: 10 Informe como foi desenvolvido o Projeto.
Você deve fornecer uma breve descrição de como o projeto foi desenvolvido, quais técnicas e
ferramentas foram utilizadas, e quais foram os principais desafios encontrados durante o
desenvolvimento.
"""

# Questão 10
# Escolhi esse tema por já ter conhecimento prévio, o que agiliza a implementação dos dados no DataFrame.
# Usei a IDE Google Colab, que conheci na sala de aula. Me interessei por ela devido à facilidade de organizar tudo e transportar do meu PC para os computadores da faculdade.
# Resolvi construir listas e em seguida transformá-las em um dicionário pois essa foi a forma que achei mais conveniente e lógica,
# em seguida fiz o DataFrame com base nesse dicionário, sempre usando métodos da biblioteca pandas para manipular os dados.
# Dentre desafios do desenvolvimento, o mais complicado foi aprender as especificidades de cada método da biblioteca, tendo como base a documentação oficial do Pandas e o fórum Stack Overflow

"""# Extra: métodos da bibliotca Pandas comumente utilizados com DataFrames"""

print(f"Índices: {df_videogames.index}") # imprime quantos índices possui o DataFrame
print(f"Colunas: {df_videogames.columns}") # imprime quais colunas tem no DataFrame
print(f"Dimensões: {df_videogames.ndim}") # imprime o número de dimensões do DataFrame
print(f"Formato: {df_videogames.shape}") # imprime número de linhas e colunas do DataFrame
print(f"Tamanho: {df_videogames.size}") # imprime o tamanho (colunas * linhas) do DataFrame
print(f"Está vazio: {df_videogames.empty}") # imprime um booleano que diz se o DataFrame está vazio